#!/bin/bash

# ==============================================
# SSH Tools Menu
# ==============================================
# Ferramentas √∫teis para administra√ß√£o SSH
# ==============================================

# Fun√ß√£o para exibir mensagens coloridas
echo_color() {
    local color=$1
    local message=$2
    case $color in
        "red") echo -e "\033[1;31m$message\033[0m" ;;
        "green") echo -e "\033[1;32m$message\033[0m" ;;
        "yellow") echo -e "\033[1;33m$message\033[0m" ;;
        "blue") echo -e "\033[1;34m$message\033[0m" ;;
        "magenta") echo -e "\033[1;35m$message\033[0m" ;;
        "cyan") echo -e "\033[1;36m$message\033[0m" ;;
        *) echo -e "$message" ;;
    esac
}

# Fun√ß√£o para verificar status de comandos
check_status() {
    if [ $? -eq 0 ]; then
        echo_color "green" "‚úÖ $1"
    else
        echo_color "red" "‚ùå Erro ao $1"
        exit 1
    fi
}

# Fun√ß√£o para verificar e instalar depend√™ncias
check_dependencies() {
    local packages=("openssh-client" "sshpass" "expect" "nmap" "netcat-openbsd" "netcat-traditional")
    
    for package in "${packages[@]}"; do
        if ! dpkg -l | grep -q "^ii  $package "; then
            echo_color "yellow" "üîÑ Instalando $package..."
            apt-get update -y
            apt-get install -y $package
            check_status "instalar $package"
        else
            echo_color "green" "‚úÖ $package j√° est√° instalado"
        fi
    done
}

# Fun√ß√£o para validar IP
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        for octet in ${ip//./ }; do
            if [[ $octet -gt 255 ]]; then
                return 1
            fi
        done
        return 0
    fi
    return 1
}

# Fun√ß√£o para validar porta
validate_port() {
    local port=$1
    if [[ $port =~ ^[0-9]+$ ]] && [ $port -ge 1 ] && [ $port -le 65535 ]; then
        return 0
    fi
    return 1
}

# Fun√ß√£o para testar conex√£o SSH
test_ssh_connection() {
    local host=$1
    local port=$2
    local user=$3
    local password=$4
    
    echo_color "blue" "üîç Testando conex√£o SSH..."
    echo_color "cyan" "üéØ Host: $host"
    echo_color "cyan" "üîë Usu√°rio: $user"
    echo ""
    
    if [ ! -z "$password" ]; then
        sshpass -p "$password" ssh -p "$port" -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$user@$host" "echo 'Conex√£o bem sucedida!'"
    else
        ssh -p "$port" -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$user@$host" "echo 'Conex√£o bem sucedida!'"
    fi
    
    if [ $? -eq 0 ]; then
        echo_color "green" "‚úÖ Conex√£o SSH estabelecida com sucesso!"
    else
        echo_color "red" "‚ùå Falha na conex√£o SSH!"
    fi
}

# Fun√ß√£o para testar credenciais SSH
test_ssh_credentials() {
    local host=$1
    local port=$2
    local user=$3
    local password=$4
    
    echo_color "blue" "üîç Testando credenciais SSH..."
    echo_color "cyan" "üéØ Host: $host"
    echo_color "cyan" "üîë Usu√°rio: $user"
    echo ""
    
    if [ ! -z "$password" ]; then
        sshpass -p "$password" ssh -p "$port" -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$user@$host" "exit"
        if [ $? -eq 0 ]; then
            echo_color "green" "‚úÖ Credenciais v√°lidas!"
        else
            echo_color "red" "‚ùå Credenciais inv√°lidas!"
        fi
    else
        echo_color "yellow" "‚ö†Ô∏è Nenhuma senha fornecida para teste"
    fi
}

# Fun√ß√£o para gerar chave SSH
generate_ssh_key() {
    local type=$1
    local bits=$2
    local comment=$3
    
    echo_color "blue" "üîë Gerando chave SSH..."
    echo_color "cyan" "üìù Tipo: $type"
    echo_color "cyan" "üî¢ Bits: $bits"
    echo_color "cyan" "üí¨ Coment√°rio: $comment"
    echo ""
    
    ssh-keygen -t "$type" -b "$bits" -C "$comment" -f ~/.ssh/id_"$type"_"$bits"
    check_status "gerar chave SSH"
}

# Fun√ß√£o para copiar chave SSH
copy_ssh_key() {
    local host=$1
    local port=$2
    local user=$3
    local password=$4
    
    echo_color "blue" "üì§ Copiando chave SSH..."
    echo_color "cyan" "üéØ Host: $host"
    echo_color "cyan" "üîë Usu√°rio: $user"
    echo ""
    
    if [ ! -z "$password" ]; then
        sshpass -p "$password" ssh-copy-id -p "$port" "$user@$host"
    else
        ssh-copy-id -p "$port" "$user@$host"
    fi
    
    check_status "copiar chave SSH"
}

# Fun√ß√£o para executar comando remoto
execute_remote_command() {
    local host=$1
    local port=$2
    local user=$3
    local password=$4
    local command=$5
    
    echo_color "blue" "‚öôÔ∏è Executando comando remoto..."
    echo_color "cyan" "üéØ Host: $host"
    echo_color "cyan" "üîë Usu√°rio: $user"
    echo_color "yellow" "üìù Comando: $command"
    echo ""
    
    if [ ! -z "$password" ]; then
        sshpass -p "$password" ssh -p "$port" "$user@$host" "$command"
    else
        ssh -p "$port" "$user@$host" "$command"
    fi
    
    check_status "executar comando remoto"
}

# Fun√ß√£o para criar t√∫nel SSH
create_ssh_tunnel() {
    local host=$1
    local port=$2
    local user=$3
    local password=$4
    local local_port=$5
    local remote_port=$6
    
    echo_color "blue" "üîÑ Criando t√∫nel SSH..."
    echo_color "cyan" "üéØ Host: $host"
    echo_color "cyan" "üîë Usu√°rio: $user"
    echo_color "yellow" "üìä Porta Local: $local_port"
    echo_color "yellow" "üìä Porta Remota: $remote_port"
    echo ""
    
    if [ ! -z "$password" ]; then
        sshpass -p "$password" ssh -p "$port" -L "$local_port":localhost:"$remote_port" "$user@$host"
    else
        ssh -p "$port" -L "$local_port":localhost:"$remote_port" "$user@$host"
    fi
}

# Fun√ß√£o para transferir arquivo
transfer_file() {
    local mode=$1
    local source=$2
    local destination=$3
    local user=$4
    local host=$5
    local port=$6
    local password=$7
    
    echo_color "blue" "üîÑ Iniciando transfer√™ncia..."
    echo_color "cyan" "üì§ Origem: $source"
    echo_color "cyan" "üì• Destino: $destination"
    echo ""
    
    if [ "$mode" = "send" ]; then
        if [ ! -f "$source" ] && [ ! -d "$source" ]; then
            echo_color "red" "‚ùå Arquivo ou diret√≥rio n√£o encontrado!"
            return 1
        fi
        
        echo_color "cyan" "üìä Tamanho: $(du -sh "$source" | cut -f1)"
    fi
    
    if [ ! -z "$password" ]; then
        if [ "$mode" = "send" ]; then
            if [ -d "$source" ]; then
                sshpass -p "$password" scp -P "$port" -r "$source" "$user@$host:$destination"
            else
                sshpass -p "$password" scp -P "$port" "$source" "$user@$host:$destination"
            fi
        else
            sshpass -p "$password" scp -P "$port" "$user@$host:$source" "$destination"
        fi
    else
        if [ "$mode" = "send" ]; then
            if [ -d "$source" ]; then
                scp -P "$port" -r "$source" "$user@$host:$destination"
            else
                scp -P "$port" "$source" "$user@$host:$destination"
            fi
        else
            scp -P "$port" "$user@$host:$source" "$destination"
        fi
    fi
    
    check_status "transferir arquivo"
}

# Banner
echo_color "magenta" "=============================================="
echo_color "yellow" "üîë SSH Tools Menu - Vers√£o 1.0 üîë"
echo_color "magenta" "=============================================="
echo_color "cyan" "Ferramentas √∫teis para administra√ß√£o SSH"
echo_color "magenta" "=============================================="
echo ""

# Verificar permiss√µes de root
if [ "$EUID" -ne 0 ]; then 
    echo_color "red" "‚ùå Este script precisa ser executado como root (sudo)"
    exit 1
fi

# Verificar e instalar depend√™ncias
check_dependencies

# Menu principal
while true; do
    echo_color "cyan" "üìã Menu SSH Tools:"
    echo "1) Testar Conex√£o SSH"
    echo "2) Testar Credenciais SSH"
    echo "3) Gerar Chave SSH"
    echo "4) Copiar Chave SSH"
    echo "5) Executar Comando Remoto"
    echo "6) Criar T√∫nel SSH"
    echo "7) Enviar Arquivo/Diret√≥rio"
    echo "8) Receber Arquivo/Diret√≥rio"
    echo "9) Scan de Portas SSH"
    echo "10) Teste de Performance SSH"
    echo "11) Backup Remoto"
    echo "12) Monitoramento de Conex√£o"
    echo "13) Configura√ß√£o de Host SSH"
    echo "14) Limpeza de Chaves SSH"
    echo "15) Teste de Banda SSH"
    echo "0) Sair"
    echo ""
    
    read -p "Escolha uma op√ß√£o (0-15): " option
    echo ""
    
    case $option in
        1|2|5|6|7|8|9|10|11|12|13|14|15)
            read -p "Digite o IP ou dom√≠nio do servidor: " host
            if ! validate_ip "$host" && ! host "$host" &> /dev/null; then
                echo_color "red" "‚ùå IP ou dom√≠nio inv√°lido!"
                continue
            fi
            
            read -p "Digite a porta SSH (pressione ENTER para padr√£o 22): " port
            if [ ! -z "$port" ] && ! validate_port "$port"; then
                echo_color "red" "‚ùå Porta inv√°lida!"
                continue
            fi
            
            read -p "Digite o usu√°rio SSH: " user
            read -p "Digite a senha SSH (opcional): " password
            
            case $option in
                1)
                    test_ssh_connection "$host" "$port" "$user" "$password"
                    ;;
                2)
                    test_ssh_credentials "$host" "$port" "$user" "$password"
                    ;;
                5)
                    read -p "Digite o comando a executar: " command
                    execute_remote_command "$host" "$port" "$user" "$password" "$command"
                    ;;
                6)
                    read -p "Digite a porta local para o t√∫nel: " local_port
                    read -p "Digite a porta remota para o t√∫nel: " remote_port
                    create_ssh_tunnel "$host" "$port" "$user" "$password" "$local_port" "$remote_port"
                    ;;
                7|8)
                    case $option in
                        7)
                            read -p "Digite o caminho do arquivo/diret√≥rio local: " source
                            read -p "Digite o caminho de destino no servidor: " destination
                            transfer_file "send" "$source" "$destination" "$user" "$host" "$port" "$password"
                            ;;
                        8)
                            read -p "Digite o caminho do arquivo/diret√≥rio no servidor: " source
                            read -p "Digite o caminho de destino local: " destination
                            transfer_file "receive" "$source" "$destination" "$user" "$host" "$port" "$password"
                            ;;
                    esac
                    ;;
                9)
                    echo_color "blue" "üîç Iniciando scan de portas SSH..."
                    nmap -p "$port" -sV "$host"
                    ;;
                10)
                    echo_color "blue" "‚ö° Testando performance SSH..."
                    time ssh -p "$port" "$user@$host" "echo 'Teste de performance'"
                    ;;
                11)
                    read -p "Digite o diret√≥rio para backup: " backup_dir
                    echo_color "blue" "üíæ Iniciando backup remoto..."
                    if [ ! -z "$password" ]; then
                        sshpass -p "$password" ssh -p "$port" "$user@$host" "tar czf - $backup_dir" > "backup_$(date +%Y%m%d_%H%M%S).tar.gz"
                    else
                        ssh -p "$port" "$user@$host" "tar czf - $backup_dir" > "backup_$(date +%Y%m%d_%H%M%S).tar.gz"
                    fi
                    check_status "realizar backup"
                    ;;
                12)
                    echo_color "blue" "üìä Monitorando conex√£o SSH..."
                    while true; do
                        if ping -c 1 "$host" &> /dev/null; then
                            echo_color "green" "‚úÖ Conex√£o ativa - $(date)"
                        else
                            echo_color "red" "‚ùå Conex√£o perdida - $(date)"
                        fi
                        sleep 5
                    done
                    ;;
                13)
                    echo_color "blue" "‚öôÔ∏è Configurando host SSH..."
                    echo "Host $host" >> ~/.ssh/config
                    echo "    HostName $host" >> ~/.ssh/config
                    echo "    User $user" >> ~/.ssh/config
                    echo "    Port $port" >> ~/.ssh/config
                    check_status "configurar host SSH"
                    ;;
                14)
                    echo_color "blue" "üßπ Limpando chaves SSH..."
                    rm -f ~/.ssh/known_hosts
                    check_status "limpar chaves SSH"
                    ;;
                15)
                    echo_color "blue" "üìä Testando banda SSH..."
                    if [ ! -z "$password" ]; then
                        sshpass -p "$password" ssh -p "$port" "$user@$host" "dd if=/dev/zero bs=1M count=100" | pv > /dev/null
                    else
                        ssh -p "$port" "$user@$host" "dd if=/dev/zero bs=1M count=100" | pv > /dev/null
                    fi
                    ;;
            esac
            ;;
            
        3)
            echo_color "blue" "üîë Gerando nova chave SSH..."
            read -p "Digite o tipo de chave (rsa/ed25519): " key_type
            read -p "Digite o n√∫mero de bits (2048/4096): " key_bits
            read -p "Digite um coment√°rio para a chave: " key_comment
            generate_ssh_key "$key_type" "$key_bits" "$key_comment"
            ;;
            
        4)
            read -p "Digite o IP ou dom√≠nio do servidor: " host
            if ! validate_ip "$host" && ! host "$host" &> /dev/null; then
                echo_color "red" "‚ùå IP ou dom√≠nio inv√°lido!"
                continue
            fi
            
            read -p "Digite a porta SSH (pressione ENTER para padr√£o 22): " port
            if [ ! -z "$port" ] && ! validate_port "$port"; then
                echo_color "red" "‚ùå Porta inv√°lida!"
                continue
            fi
            
            read -p "Digite o usu√°rio SSH: " user
            read -p "Digite a senha SSH: " password
            copy_ssh_key "$host" "$port" "$user" "$password"
            ;;
            
        0)
            echo_color "green" "üëã At√© logo!"
            exit 0
            ;;
            
        *)
            echo_color "red" "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
    
    echo ""
    read -p "Pressione ENTER para continuar..."
    clear
done 
